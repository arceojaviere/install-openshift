---
- name: Create an environment OpenShift{{ ':' }} based on file openshift-definition.info
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
     - gce/authentication
     - gce/authentication_dns
     - gce/defaults
     - openshift-definition.info
     - notification/slack_authentication
  tasks:
     - include: commons/setting_defaults.yaml

     - fail: msg="redhat_subscription_username is not defined"
       when: redhat_subscription_username is not defined
       tags:
          - always

     - fail: msg="redhat_subscription_password is not defined"
       when: redhat_subscription_password is not defined
       tags:
          - always

     - fail: msg="openshift_master_url not defined"
       when: openshift_master_url is not defined
       tags:
          - always

     - fail: msg="openshift_cloudapps_url is not defined"
       when: openshift_cloudapps_url is not defined
       tags:
          - always
    
### MASTER MASTER MASTER MASTER MASTER MASTER MASTER MASTER MASTER MASTER MASTER 
#### MASTER MASTER MASTER MASTER MASTER MASTER MASTER MASTER MASTER MASTER MASTER 
     - name: "MASTER: Creating a Static IP Address"
       gce_eip:
         name: "{{ master_definition.hostname }}"
         region: "{{ region }}"
         state: present
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       register: openshift_master_static_ip

     - name: "MASTER: Creating boot disk: {{ master_definition.hostname }}"
       gce_pd:
         name: "{{ master_definition.hostname }}"
         state: present
         mode: READ_WRITE
         image: "{{ master_definition.image }}"
         disk_type: "{{ master_definition.disk_type }}"
         size_gb: "{{ master_definition.disk_size }}"
         zone: "{{ zone }}"
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"

     - name: "MASTER: Creating instance {{ ':' }} {{ master_definition.hostname }}"
       gce:
         instance_names: "{{ master_definition.hostname }}"
         state: "present"
         machine_type: "{{ master_definition.machine }}"
         zone: "{{ zone }}"
         external_ip: "{{ openshift_master_static_ip.address }}"
         network: "{{ network_name }}"
         subnetwork: "{{ subnetwork_name }}"
         tags: ["enable-ssh","openshift-master"]
         disk_auto_delete: True
         disks:
            - name: "{{ master_definition.hostname }}"
              mode: READ_WRITE
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       ignore_errors: True
       register: master_instance_creation

     - debug: var=master_instance_creation

     - name: Getting OpenShift's Master Public IP{{ ':' }} {{ master_instance_creation.instance_data[0].public_ip }}
       set_fact: openshift_master_public_ip={{ master_instance_creation.instance_data[0].public_ip }}

     - name: Getting OpenShift's Master Private IP{{ ':' }} {{ master_instance_creation.instance_data[0].private_ip }}
       set_fact: openshift_master_private_ip={{ master_instance_creation.instance_data[0].private_ip }}

     - name: Update bin/install_openshift.sh to call the right server
       copy: dest=bin/install_openshift.sh content="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no {{ ssh_default_image_user }}@{{ openshift_master_public_ip }} \"sudo ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/prerequisites.yml; sudo ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/deploy_cluster.yml; /root/postinstall/post-openshift-install.sh\""

     - name: Add a Slack Notification at end of OpenShift's installation
       lineinfile: path=bin/install_openshift.sh insertafter=EOF line="ansible localhost -m slack -a \"token={{ default_slack_token }} msg='OpenShift is Ready to go'\""
       when: default_slack_token is defined and default_slack_token is not none

     - name: (RHMAP) Update bin/install_openshift_rhmap.sh to call after provisioning
       copy: dest=bin/install_openshift_rhmap.sh content="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no {{ ssh_default_image_user }}@{{ openshift_master_public_ip }} \"sudo ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/prerequisites.yml; sudo ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/deploy_cluster.yml; /root/postinstall/post-openshift-install.sh; /root/postinstall/install_rhmap.sh\""

     - name: Add a Slack Notification at end of OpenShift's installation
       lineinfile: path=bin/install_openshift_rhmap.sh insertafter=EOF line="ansible localhost -m slack -a \"token={{ default_slack_token }} msg='OpenShift with RHMAP is Ready to go'\""
       when: default_slack_token is defined and default_slack_token is not none

     - name: "MASTER: Attaching a Docker storage{{ ':' }} {{ master_definition.hostname }}"
       gce_pd:
         instance_name: "{{ master_definition.hostname }}"
         name: "{{ master_definition.hostname }}-docker"
         state: present
         mode: READ_WRITE
         disk_type: "{{ master_definition.disk_docker_type }}"
         size_gb: "{{ master_definition.disk_docker_size }}"
         delete_on_termination: True
         zone: "{{ zone }}"
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"

     - name: Adding OpenShift's Master into group{{ ':' }} openshift_master_group
       add_host: groups=openshift_master_group hostname={{ openshift_master_public_ip }}
                 ansible_user={{ ssh_default_image_user }} ansible_password={{ ssh_default_image_password }}
                 ansible_port={{ ssh_default_image_port }}
                 openshift_master_private_ip={{ openshift_master_private_ip }}

     - name: "Cloud DNS: Updating entry for Zone{{ ':' }}{{ dns_zone }} for Master {{ openshift_master_url }} {{ openshift_master_static_ip.address }}"
       gcdns_record:
           zone: "{{ dns_zone }}"
           record: "{{ openshift_master_url }}"
           value: "{{ openshift_master_static_ip.address }}"
           state: present
           type: A
           overwrite: true
           credentials_file: "{{ dns_gce_credentials_file }}"
           project_id: "{{ dns_gce_project_id }}"
           service_account_email: "{{ dns_gce_service_account_email }}"
       when: dns_zone is defined and dns_zone is not none and dns_gce_credentials_file is defined and dns_gce_credentials_file is not none and dns_gce_project_id is defined and dns_gce_project_id is not none and dns_gce_service_account_email is defined and dns_gce_service_account_email is not none

### INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA 
#### INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA INFRA 
     - name: "INFRA: Creating a Static IP Address"
       gce_eip:
         name: "{{ infra_definition.hostname }}"
         region: "{{ region }}"
         state: present
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       register: openshift_infra_static_ip

     - name: "INFRA: Creating boot disk: {{ infra_definition.hostname }}"
       gce_pd:
         name: "{{ infra_definition.hostname }}"
         state: present
         mode: READ_WRITE
         image: "{{ infra_definition.image }}"
         disk_type: "{{ infra_definition.disk_type }}"
         size_gb: "{{ infra_definition.disk_size }}"
         zone: "{{ zone }}"
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"

     - name: "INFRA: Creating instance {{ ':' }} {{ infra_definition.hostname }}"
       gce:
         instance_names: "{{ infra_definition.hostname }}"
         state: "present"
         machine_type: "{{ infra_definition.machine }}"
         zone: "{{ zone }}"
         network: "{{ network_name }}"
         external_ip: "{{ openshift_infra_static_ip.address }}"
         subnetwork: "{{ subnetwork_name }}"
         tags: ["enable-ssh","openshift-infra-node"]
         disk_auto_delete: True
         disks:
            - name: "{{ infra_definition.hostname }}"
              mode: READ_WRITE
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       ignore_errors: True
       register: infra_instance_creation

     - debug: var=infra_instance_creation

     - name: Getting OpenShift's Infra Public IP{{ ':' }} {{ infra_instance_creation.instance_data[0].public_ip }}
       set_fact: openshift_infra_public_ip={{ infra_instance_creation.instance_data[0].public_ip }}

     - name: "INFRA: Attaching a Docker storage{{ ':' }} {{ infra_definition.hostname }}"
       gce_pd:
         instance_name: "{{ infra_definition.hostname }}"
         name: "{{ infra_definition.hostname }}-docker"
         state: present
         mode: READ_WRITE
         disk_type: "{{ infra_definition.disk_docker_type }}"
         size_gb: "{{ infra_definition.disk_docker_size }}"
         delete_on_termination: True
         zone: "{{ zone }}"
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"

     - name: Adding OpenShift's Infra into group{{ ':' }} openshift_infra_group
       add_host: groups=openshift_infra_group hostname={{ openshift_infra_public_ip }}
                 ansible_user={{ ssh_default_image_user }} ansible_password={{ ssh_default_image_password }}
                 ansible_port={{ ssh_default_image_port }} 

     - name: "Cloud DNS: Updating entry for Zone{{ ':' }}{{ dns_zone }} for Infra *.{{ openshift_cloudapps_url }} {{ openshift_infra_static_ip.address }}"
       gcdns_record:
           zone: "{{ dns_zone }}"
           record: "*.{{ openshift_cloudapps_url }}"
           value: "{{ openshift_infra_static_ip.address }}"
           state: present
           type: A
           overwrite: true
           credentials_file: "{{ dns_gce_credentials_file }}"
           project_id: "{{ dns_gce_project_id }}"
           service_account_email: "{{ dns_gce_service_account_email }}"
       when: dns_zone is defined and dns_zone is not none and dns_gce_credentials_file is defined and dns_gce_credentials_file is not none and dns_gce_project_id is defined and dns_gce_project_id is not none and dns_gce_service_account_email is defined and dns_gce_service_account_email is not none

### NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE 
#### NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE NODE 
     - name: "NODE: Creating boot disk: {{ item.hostname }}"
       gce_pd:
         name: "{{ item.hostname }}"
         state: present
         mode: READ_WRITE
         image: "{{ item.image }}"
         disk_type: "{{ item.disk_type }}"
         size_gb: "{{ item.disk_size }}"
         zone: "{{ zone }}"
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       with_items: "{{ nodes_definition }}"
       register: node_instance_creation

     - name: "NODE: Creating instance: {{ item.hostname }}"
       gce:
         instance_names: "{{ item.hostname }}"
         state: "present"
         machine_type: "{{ item.machine }}"
         zone: "{{ zone }}"
         network: "{{ network_name }}"
         subnetwork: "{{ subnetwork_name }}"
         tags: "{{ item.tags }}"
         disk_auto_delete: True
         disks:
            - name: "{{ item.hostname }}"
              mode: READ_WRITE
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       ignore_errors: True
       with_items: "{{ nodes_definition }}"
       register: node_instance_creation

     - debug: var=node_instance_creation

     - name: "NODE: Attaching a Docker storage for Node: {{ item.hostname }}"
       gce_pd:
         instance_name: "{{ item.hostname }}"
         name: "{{ item.hostname }}-docker"
         state: present
         mode: READ_WRITE
         disk_type: "{{ item.disk_docker_type }}"
         size_gb: "{{ item.disk_docker_size }}"
         delete_on_termination: True
         zone: "{{ zone }}"
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       with_items: "{{ nodes_definition }}"

     - name: Adding OpenShift's Infra into group{{ ':' }} openshift_node_group
       add_host: hostname={{ item.instance_data[0].public_ip }} groups=openshift_node_group
                 ansible_user={{ ssh_default_image_user }} ansible_password={{ ssh_default_image_password }}
                 ansible_port={{ ssh_default_image_port }}
       with_items: "{{ node_instance_creation.results }}"

### WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT 
####  WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT WAIT 
     - name: Wait for OpenShift's Master instance to be up{{ ':' }} {{ openshift_master_public_ip }}
       wait_for: host="{{ openshift_master_public_ip }}" port={{ ssh_default_image_port }}
                 delay=30  state=started       

     - name: Wait for OpenShift's Infra instance to be up{{ ':' }} {{ openshift_infra_public_ip }}
       wait_for: host="{{ openshift_master_public_ip }}" port={{ ssh_default_image_port }}
                 delay=30  state=started

     - name: Wait for OpenShift's Node instances to be up
       wait_for: host="{{ item.instance_data[0].public_ip }}" port={{ ssh_default_image_port }}  delay=30  state=started
       with_items: "{{ node_instance_creation.results }}"

     - name: Generating the first version of the inventory file
       template: src=templates/ansible_hosts.j2 dest=/tmp/ansible_hosts.j2

     - name: (RHMAP) Generating a temporary RHMAP inventory 
       template: src=postinstall/rhmap/rhmap-inventory.j2 dest=/tmp/rhmap-inventory

     - name: Add the hostname into the temporary inventory{{ ':' }} {{ master_definition.hostname }} into masters section
       lineinfile: dest=/tmp/ansible_hosts.j2 insertafter="\[masters\]" state="present" line="{{ master_definition.hostname }} openshift_public_hostname={{ openshift_master_url }}"

     - name: Add the hostname into the temporary inventory{{ ':' }} {{ master_definition.hostname }} into etcd section
       lineinfile: dest=/tmp/ansible_hosts.j2 insertafter="\[etcd\]" state="present" line="{{ master_definition.hostname }}"

     - name: (RHMAP) Inserting Master hostname into RHMAP inventory
       lineinfile: dest=/tmp/rhmap-inventory regexp="^\[master\]" state="present" line="[master]\n{{ master_definition.hostname }}"

     - name: Add the hostname into the temporary inventory{{ ':' }} {{ master_definition.hostname }} into nodes section 
       lineinfile: dest=/tmp/ansible_hosts.j2 insertafter="\[nodes\]" state="present" line="{{ master_definition.hostname }}"

     - name: Add the hostname into the temporary inventory file{{ ':' }} {{ infra_definition.hostname }} into nodes section
       lineinfile: dest=/tmp/ansible_hosts.j2 insertafter="\[nodes\]" state="present" line="{{ infra_definition.hostname }} openshift_node_labels=\"{'host'{{ ':' }} 'infra'}\""

     - name: Add the hostname into the temporary inventory (all Nodes)
       lineinfile: dest=/tmp/ansible_hosts.j2 insertafter="\[nodes\]" state="present" line="{{ item.hostname }}  openshift_node_labels=\"{'host'{{ ':' }} 'apps'}\""
       with_items: "{{ nodes_definition }}" 

     - name: (RHMAP) Inserting Nodes hostname into RHMAP inventory - core
       lineinfile: dest=/tmp/rhmap-inventory regexp="^\[core\]" state="present" backrefs="yes" line="[core]\n{{ item.hostname }}"
       with_items: "{{ nodes_definition }}"

     - name: (RHMAP) Inserting Nodes hostname into RHMAP inventory - mbaas
       lineinfile: dest=/tmp/rhmap-inventory regexp="^\[mbaas\]" state="present" backrefs="yes" line="[mbaas]\n{{ item.hostname }}"
       with_items: "{{ nodes_definition }}"

### RED HAT SUBSCRIPTION RED HAT SUBSCRIPTION RED HAT SUBSCRIPTION RED HAT SUBSCRIPTION 
####  RED HAT SUBSCRIPTION RED HAT SUBSCRIPTION RED HAT SUBSCRIPTION RED HAT SUBSCRIPTION 
- name: (RED HAT SUBSCRIPTION) Installing the necessary Red Hat's Subscription in each host
  hosts: all
  gather_facts: False
  vars_files:
     - openshift-definition.info
     - gce/defaults
  vars:
     subscription_name: "Employee SKU"
     subscription_type: "Virtual"
  tasks:
    - debug: var=hostvars
      tags:
         - redhat_subs

    - name: RED HAT SUBSCRIPTION{{ ':' }} Installing Red Hat's Subscription Manager
      yum: name=subscription-manager state=latest
      ignore_errors: True
      tags:
         - redhat_subs

    - name: RED HAT SUBSCRIPTION{{ ':' }} Registering to Red Hat's Subscription Manager
      command: subscription-manager register --username={{ redhat_subscription_username }}  --password={{ redhat_subscription_password }} --force
      tags:
         - redhat_subs

    - name: RED HAT SUBSCRIPTION:{{ ':' }} Delete a temporary existing file (if exists) /tmp/repositories_available.txt
      file: path=/tmp/repositories_available.txt state=absent
      when: redhat_subscription_pool_id is not defined
      ignore_errors: True
      tags:
         - redhat_subs

    - name: RED HAT SUBSCRIPTION:{{ ':' }} List of all possible repositories available
      shell: subscription-manager list --available > /tmp/repositories_available.txt
      when: redhat_subscription_pool_id is not defined
      tags:
         - redhat_subs

    - name: "RED HAT SUBSCRIPTION: Fetching information about the subscription: {{ subscription_name }} type: {{ subscription_type }}"
      command: "sed -n '/Subscription Name:   {{ subscription_name }}/{p; :loop n; p; /System Type:         {{ subscription_type }}/q; b loop}' /tmp/repositories_available.txt"
      register: subscription_info
      when: redhat_subscription_pool_id is not defined
      tags:
         - redhat_subs

    - name: RED HAT SUBSCRIPTION:{{ ':' }} Fetching Pool ID in this subscription
      set_fact: redhat_subscription_pool_id={{ subscription_info.stdout | regex_replace("(?s)^.*?Pool ID:\s+", "") |
                                                                    regex_replace("(?s)\\n.*$","") }}
      when: redhat_subscription_pool_id is not defined
      tags:
         - redhat_subs

    - name: RED HAT SUBSCRIPTION{{ ':' }} Attaching a Pool ID{{ ':' }} {{ redhat_subscription_pool_id }}
      command: subscription-manager attach --pool={{ redhat_subscription_pool_id }}
      tags:
         - redhat_subs

    - name: RED HAT SUBSCRIPTION{{ ':' }} Disable all Repositories
      command: subscription-manager repos --disable="*"
      tags:
         - redhat_subs

    - name: RED HAT SUBSCRIPTION{{ ':' }} Enabling Repository
      command: subscription-manager repos --enable={{ item }}
      with_items: "{{ repositories }}"
      tags:
         - redhat_subs

    - name: Updating the entire host
      yum: name="*" state=latest
      tags:
         - redhat_subs

### MASTER SSH MASTER SSH MASTER SSH MASTER SSH MASTER SSH MASTER SSH MASTER SSH MASTER SSH 
###  MASTER SSH MASTER SSH MASTER SSH MASTER SSH MASTER SSH MASTER SSH MASTER SSH MASTER SSH 
- name: (MASTER SSH) Preparing Master 
  hosts: openshift_master_group
  vars_files:
     - openshift-definition.info
     - gce/defaults  
  tasks:
#    - debug: var=hostvars
#      tags:
#         - prepare_master

    - name: Generate keys for Master
      command: "ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N \"\""
      tags:
         - prepare_master

    - name: Read the content of this key
      slurp: src=/root/.ssh/id_rsa.pub
      register: content_encoded
      tags:
         - prepare_master

    - name: Define the content of the key
      set_fact: openshift_master_ssh_key="{{ content_encoded.content | b64decode }}"
      tags:
         - prepare_master

    - name: Installing OpenShift's Utils
      yum: name="atomic-openshift-utils" state=latest
      tags:
         - prepare_master

    - name: Define the final Inventory for installation
      template: src=/tmp/ansible_hosts.j2 dest=/etc/ansible/hosts
      tags:
         - prepare_master

    - name: Disable 'host_key_checking' in Ansible
      lineinfile: dest=/etc/ansible/ansible.cfg regexp="host_key_checking" state=present line="host_key_checking = False"
      tags:
         - prepare_master

    - name: Create directory "postinstall" 
      file: path=/root/postinstall/templates state=directory
      tags:
         - prepare_master

    - name: Download all the necessary playbooks for post-install
      uri: url=https://raw.githubusercontent.com/latam-tech-office/install-openshift/master/postinstall/{{ item }}
            method=GET status_code=200 creates=True dest=/root/postinstall/{{ item }}
      with_items:
           - create_persistentvolumes.yaml
           - post-install.yaml
           - templates/persistentvolume-gitlab-shell.yaml.j2
           - templates/persistentvolume.yaml.j2
      tags:
         - prepare_master

    - name: Generating OpenShift PostInstall script
      template: src=postinstall/post-openshift-install.sh.j2 dest=/root/postinstall/post-openshift-install.sh mode=a+x
      tags:
         - prepare_master

    - name: (RHMAP) Installing RHMAP Templates
      yum: name=rhmap-fh-openshift-templates      
      tags:
         - prepare_master

    - name: (RHMAP) Generating RHMAP inventory into Master
      template: src=/tmp/rhmap-inventory dest={{ rhmap_directory }}/rhmap_inventory   
      tags:
         - prepare_master

    - name: (RHMAP) Generate installer script
      template: src=postinstall/rhmap/install_rhmap.sh.j2 dest=/root/postinstall/install_rhmap.sh mode=a+x
      tags:
         - prepare_master

    - name: (RHMAP) Download playbook to config RHMAP
      uri: url=https://raw.githubusercontent.com/latam-tech-office/install-openshift/master/postinstall/rhmap/{{ item }}
            method=GET status_code=200 creates=True dest=/root/postinstall/{{ item }}
      with_items:
           - rhmap_config.yaml
      tags:
         - prepare_master

### PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE 
###   PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE 
- name: (PREPARE) Preparing all hosts to install OpenShift
  hosts: all
  gather_facts: False
  vars_files:
     - gce/defaults
  vars:
     docker_device: /dev/sdb
     docker_device_partition: "{{ docker_device }}1"
     prereqs_packages:
       - vim
       - wget
       - git
       - net-tools
       - bind-utils
       - docker
       - atomic-openshift-excluder
       - atomic-openshift-docker-excluder
       - iptables-services
       - bridge-utils
       - bash-completion
       - httpd-tools
       - screen
       - kexec-tools 
       - sos 
       - psacct
  tasks:
    - name: Loading SSH KEY from localhost (if any)
      set_fact: ssh_key="{{ lookup('file','{{ ssh_key_file }}') }}"
      when: ssh_key_file is defined
      tags:
         - prepare

    - name: Copy a SSH Key (if does exist)
      lineinfile: dest=/root/.ssh/authorized_keys state=present create=yes line="{{ ssh_key }}"
      when: ssh_key is defined
      tags:
         - prepare

    - name: Allow this host to log as root
      lineinfile: dest=/etc/ssh/sshd_config state=present regexp="^PermitRootLogin" line="# PermitRootLogin yes"
      tags:
         - prepare

    - name: Restart SSHD Service
      service: name=sshd state=restarted
      tags:
         - prepare

    - name: Create OpenShift's Master SSH Key
      lineinfile: dest=/root/.ssh/authorized_keys state=present create=yes line="{{ hostvars[groups.openshift_master_group[0]]['openshift_master_ssh_key'] }}"
      tags:
         - prepare

    - name: Installing Basic Applications
      yum: name="{{ item }}" state=present
      with_items: "{{ prereqs_packages }}"
      tags:
         - prepare

    - name: Create a partition for Docker
      command: parted {{ docker_device }} --script 'mklabel msdos mkpart primary 0% 100%'
      tags:
         - prepare

    - name: Create a VG named docker-vg (used for Docker)
      lvg: vg=docker-vg pvs={{ docker_device_partition }}
      tags:
         - prepare

    - name: Configuring Docker-Storage-Setup first
      lineinfile: dest=/etc/sysconfig/docker-storage-setup line="VG=docker-vg"
      tags:
         - prepare

    - name: Run a Docker-Storage-Setup
      command: /usr/bin/docker-storage-setup
      tags:
         - prepare

    - name: Execute a Atomic OpenShift Excluder
      command: atomic-openshift-excluder unexclude
      tags:
         - prepare

    - name: Setting Docker configuration with with the correct info
      lineinfile: dest=/etc/sysconfig/docker regexp="OPTIONS=.*" line="OPTIONS=\"--selinux-enabled --insecure-registry 172.30.0.0/16  --log-driver=journald\""
      tags:
         - prepare

    - name: Run this command to guarantee Certified Containers running
      command: /usr/libexec/rhsmcertd-worker
      tags: 
         - prepare

### FINAL STEPS FINAL STEPS FINAL STEPS FINAL STEPS FINAL STEPS FINAL STEPS FINAL STEPS  
#### FINAL STEPS FINAL STEPS FINAL STEPS FINAL STEPS FINAL STEPS FINAL STEPS FINAL STEPS 
- name: (FINAL STEPS) Removing undesirable tags and notifying user
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
     - gce/authentication
     - gce/defaults
     - openshift-definition.info
     - notification/slack_authentication
  tasks:
     - include: commons/setting_defaults.yaml
       tags:
          - final_steps

     - name: Removing SSH capability from OpenShift's Infra
       gce_tag:
         instance_name: "{{ infra_definition.hostname }}"
         tags: "enable-ssh"
         state: "absent"
         zone: "{{ zone }}"
         project_id: "{{ gce_project_id }}"
         pem_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       tags:
          - final_steps

     - name: Removing SSH capability from OpenShift's Node
       gce_tag:
         instance_name: "{{ item.hostname }}"
         tags: "enable-ssh"
         state: "absent"
         zone: "{{ zone }}"
         project_id: "{{ gce_project_id }}"
         pem_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       with_items: "{{ nodes_definition }}"
       tags:
          - final_steps
